import java.util.*;

class IncreasingSequence
{
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        int N = input.nextInt();
        List<Integer> list = new ArrayList<>();
        int last = Integer.MIN_VALUE;

        for (int i = 0; i < N; i++) {
            int num = input.nextInt();
            if (num > last) {
                list.add(num);
                last = num;
            }
        }
        System.out.println(list);
    }
}
----------------------------------------------------------
import java.util.*;
import java.lang.*;
import java.io.*;

class Complex_Stack
{
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner input = new Scanner(System. in);
	    String postfixString = input. nextLine();
		String tokens[] = postfixString.split("[ \t]+");
		Stack<Integer> stack = new Stack<>();
		String lastToken;
		for (String token: tokens) {
			try {  
				Integer op = Integer.parseInt(token);
				stack.push(op);
			} catch (NumberFormatException e){  
				Integer op1 = stack.pop();
				Integer op2 = stack.pop();
				switch (token) {
					case "+":
						stack.push(op2 + op1);
						break;
					case "-":
						stack.push(op2 - op1);
						break;
					case "*":
						stack.push(op2 * op1);
						break;
					case "/":
						stack.push(op2 / op1);
						break;
					default:
						System.out.println("Error");
						throw e;
				}
			}  
		}
		System.out.println(stack.pop());
	}
}
--------------------------------------------------
// You are using Java
import java.io.*;
import java.util.*;

class Main
{
    public static void main(String args[])
    {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        sc.nextLine();
        TreeMap <String,Integer> tm = new TreeMap<>();
        for(int i=0;i<n;i++)
        {
            String s = sc.nextLine();
            tm.put(s,tm.getOrDefault(s,0)+1);
        }
        String t = sc.nextLine();
        System.out.print(tm.getOrDefault(t,0));
    }
}
-----------------------------------------------------------------
import java.util.*;

class ReverseList
{
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        int N = input.nextInt();
        List<Integer> list = new ArrayList<>();
        
        for (int i = 0; i < N; i++) {
            list.add(input.nextInt());
        }

        int left = 0, right = N - 1;
        while (left < right) {
            Collections.swap(list, left, right);
            System.out.println(list);
            left++;
            right--;
        }
    }
}
----------------------------------------------------------
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Scanner;

class ItemType{
	private String name;
	private Double deposit;
	private Double costPerDay;
	
	@Override
	public String toString() {
		return String.format( "%-20s%-20s%-20s",name,deposit,costPerDay); 
	}
	public ItemType(String name, Double deposit, Double costPerDay) {
		super();
		this.name = name;
		this.deposit = deposit;
		this.costPerDay = costPerDay;
	}
	
		
}

class ArrayListObjectMain {
	public static void main(String args[]) {
		List <ItemType> items = new ArrayList<>();
		Scanner sc = new Scanner(System.in);
		int n = Integer.parseInt(sc.nextLine());
		for(int i=0;i<n;i++) {
			String name = sc.nextLine();
			Double deposit = Double.parseDouble(sc.nextLine());
			Double costPerDay = Double.parseDouble(sc.nextLine());
			items.add(new ItemType(name,deposit,costPerDay));
		}
		Iterator it = items.iterator();
		System.out.format("%-20s%-20s%-20s","Name","Deposit","Cost Per Day");
		System.out.println();
		while(it.hasNext()) {
			System.out.println(it.next());
		}
				
	}
	
}
----------------------------------------------------------------------------------------
import java.util.*;
class Main
{
    public static void main(String args[])
    {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String s = null;
        try
        {
            System.out.println(s);
            System.out.print(s.charAt(n));
        }
        catch(NullPointerException e)
        {
            System.out.print(e);
        }
    }
}
--------------------------------------------------------------
import java.util.Scanner;

class DotException extends Exception {
    public DotException(String message) {
        super(message);
    }
}

class AtTheRateException extends Exception {
    public AtTheRateException(String message) {
        super(message);
    }
}

class DomainException extends Exception {
    public DomainException(String message) {
        super(message);
    }
}

class EmailValidator {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String email = sc.nextLine();
        sc.close();

        try {
            if (!email.contains(".")) {
                throw new DotException("DotException: Invalid Dot usage");
            }
            if (email.indexOf('@') == -1 || email.indexOf('@') != email.lastIndexOf('@')) {
                throw new AtTheRateException("AtTheRateException: Invalid @ usage");
            }
            String domain = email.substring(email.lastIndexOf('.') + 1);
            if (!domain.equals("com") && !domain.equals("in") && !domain.equals("net") && !domain.equals("biz")) {
                throw new DomainException("DomainException: Invalid Domain");
            }
            System.out.println("Valid email address");
        } catch (DotException | AtTheRateException | DomainException e) {
            System.out.println(e.getMessage());
            System.out.println("Invalid email address");
        }
    }
}
---------------------------------------------------------------------------------------------------------------
import java.util.*;

class Main {

    static void validate(String r, String n) {
        if (r.length() != 9) {
            System.out.println("Invalid");
            throw new IllegalArgumentException("Register Number does not contain exactly 9 characters");
        }
        if (n.length() != 10) {
            System.out.println("Invalid");
            throw new IllegalArgumentException("Mobile Number does not contain exactly 10 characters");
        }

        if (!n.matches("[1-9][0-9]{9}")) {
            System.out.println("Invalid");
            throw new NumberFormatException("Mobile Number cannot contain any character other than a digit");
        }


        if (!r.matches("[0-9]{2}[A-Z]{3}[0-9]{4}")) {
            System.out.println("Invalid");
            throw new NoSuchElementException("Registration Number cannot contain any character other than digits and alphabets in format specified");
        }
    }

    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        String reg = sc.nextLine();
        String no = sc.nextLine();
        sc.close();
        try {
            validate(reg, no);
            System.out.println("Valid");
        } catch (Exception e) {
            System.out.println(e);
        }
    }
}
---------------------------------------------------------------------
import java.util.Scanner;

class AgeNotWithinRangeException extends Exception {
    public AgeNotWithinRangeException(String message) {
        super(message);
    }
}

class NameNotValidException extends Exception {
    public NameNotValidException(String message) {
        super(message);
    }
}

class Student {
    private int rollNo;
    private String name;
    private int age;
    private String course;

    public Student(int rollNo, String name, int age, String course) throws AgeNotWithinRangeException, NameNotValidException {
        if (age < 15 || age > 21) {
            throw new AgeNotWithinRangeException("Age is not between 15 and 21");
        }
        if (!name.matches("[a-zA-Z ]+")) {  // Check if name contains only letters and spaces
            throw new NameNotValidException("Name is not Valid");
        }

        this.rollNo = rollNo;
        this.name = name;
        this.age = age;
        this.course = course;
    }

    public void printDetails() {
        System.out.println(rollNo + " " + name + " " + age + " " + course);
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int rollNo = Integer.parseInt(sc.nextLine());
        String name = sc.nextLine();
        int age = Integer.parseInt(sc.nextLine());
        String course = sc.nextLine();

        try {
            Student student = new Student(rollNo, name, age, course);
            student.printDetails();
        } catch (AgeNotWithinRangeException | NameNotValidException e) {
            System.out.println(e.getMessage());
            System.out.println(rollNo + " " + name + " " + age + " " + course);
        }

        sc.close();
    }
}
------------------------------------------------------------------------------------------------
import java.util.Scanner;

class InvalidInputException extends Exception {
    public InvalidInputException(String message) {
        super(message);
    }
}

class NumberManipulation {
    private int[] digits = new int[9];  // Store first 9 digits of ISBN

    public void extractDigits(String isbn) {
        for (int i = 0; i < 9; i++) {
            digits[i] = isbn.charAt(i) - '0';  // Convert character to digit
        }
    }

    public String findLastDigit() {
        int sum = 0;
        for (int i = 0; i < 9; i++) {
            sum += digits[i] * (i + 1);  // Multiply digit by its position (starting from 1)
        }
        int lastDigit = sum % 11;  // Checksum calculation

        if (lastDigit == 10) {
            return "X"; 
        }
        return Integer.toString(lastDigit); 
    }
}

 class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        String isbnInput = scanner.nextLine();
        
        try {
            if (isbnInput.length() != 9) {
                throw new InvalidInputException("ISBN must be exactly 9 digits");
            }
            
            NumberManipulation numberManipulation = new NumberManipulation();
            numberManipulation.extractDigits(isbnInput);
            
            String lastDigit = numberManipulation.findLastDigit();
            
            System.out.println("ISBN : " + isbnInput + lastDigit);
        } catch (InvalidInputException e) {
            System.out.println("InvalidInputException: " + e.getMessage());
        }
        
        scanner.close();
    }
}
