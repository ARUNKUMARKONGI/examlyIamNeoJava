Input 1 :
ANDARTICA
Output 1 :
AND$RTIC$
Input 2 :
bananB
Output 2 :
bananB

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String str1 = sc.nextLine();
        sc.close();
        
        char firstChar = str1.charAt(0);
        String modifiedString = firstChar + str1.substring(1).replace(firstChar, '$');
        
        System.out.println(modifiedString);
    }
}
-----------------------------------------
2 3
27 38 59
73 88 99
Output 1 :
27 38 59 SUM: 124
73 88 99 SUM: 260
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int rows = sc.nextInt();
        int cols = sc.nextInt();
        int[][] matrix = new int[rows][cols];

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                matrix[i][j] = sc.nextInt();
            }
        }

        for (int i = 0; i < rows; i++) {
            int sum = 0;
            for (int j = 0; j < cols; j++) {
                System.out.print(matrix[i][j] + " ");
                sum += matrix[i][j];
            }
            System.out.println("SUM: " + sum);
        }
        
        sc.close();
    }
}


Innput 1 :
5
English Math Science EVS General
Math
Output 1 :
Found in row: 2

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        sc.nextLine(); // Consume the newline character
        
        String[] arr = sc.nextLine().split(" ");
        String s = sc.nextLine();
        
        int row = -1;
        
        for (int i = 0; i < n; i++) {
            if (arr[i].equals(s)) {
                row = i + 1;
                break;
            }
        }
        
        if (row != -1) {
            System.out.println("Found in row: " + row);
        } else {
            System.out.println("Not found");
        }
        
        sc.close();
    }
}

------------------------------------------
Largest String among array of strings
-----------------------------------------
Input 1 :
7
Blue
Green
Red
Yellow
Purple
Orange
Pink
Output 1 :
6

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        String[] arr = new String[n];

        for (int i = 0; i < n; i++) {
            arr[i] = sc.next();
        }

        int maxLength = 0;

        for (int i = 0; i < n; i++) {
            int length = arr[i].length();
            if (length > maxLength) {
                maxLength = length;
            }
        }

        System.out.println(maxLength);
        sc.close();
    }
}

------------------------------------------------------
Find and print unique characters from both strings
------------------------------------------------
Input 1 :
Hello World!
Goodbye World!
Output 1 :
HGby

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String str1 = sc.nextLine();
        String str2 = sc.nextLine();
        StringBuilder result = new StringBuilder();

        for (char ch : str1.toCharArray()) {
            if (str2.indexOf(ch) == -1 && result.indexOf(String.valueOf(ch)) == -1) {
                result.append(ch);
            }
        }

        for (char ch : str2.toCharArray()) {
            if (str1.indexOf(ch) == -1 && result.indexOf(String.valueOf(ch)) == -1) {
                result.append(ch);
            }
        }

        System.out.println(result.toString());
        sc.close();
    }
}

-------------------------------
sorted rows count in 2D array
-------------------------------
import java.util.Scanner;

public class SortedRowsCount {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int m = sc.nextInt();
        int n = sc.nextInt();
        int[][] mat = new int[m][n];

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                mat[i][j] = sc.nextInt();
            }
        }

        int count = 0;
        for (int i = 0; i < m; i++) {
            boolean increasing = true, decreasing = true;
            for (int j = 1; j < n; j++) {
                if (mat[i][j] <= mat[i][j - 1]) increasing = false;
                if (mat[i][j] >= mat[i][j - 1]) decreasing = false;
            }
            if (increasing || decreasing) count++;
        }

        System.out.println(count);
        sc.close();
    }
}


Problem Statement



Form the minimum number from the given sequence:



Given a pattern containing only I's and D's. I for increasing, and D for decreasing. Device an algorithm to print the minimum number following that pattern. Digits from 1–9 and digits can't repeat.



Examples: 


Input format :
The input consists of a single line string input consisting of characters 'I' and 'D' only, where:
'I' stands for "Increasing".
'D' stands for "Decreasing".
Output format :
The output displays a single line string representing the minimum number that can be formed following the given sequence of 'I's and 'D's.
Code constraints :
1 ≤ length of string ≤ 8

Sample test cases :
Input 1 :
ID
Output 1 :
132
Input 2 :
D
Output 2 :
21
Input 3 :
IDDD
Output 3 :
15432
------------------
Algorithm
We iterate through the pattern character by character.
We keep track of consecutive 'D' characters (dCount).
When an 'I' is encountered, we print immediately.
When a 'D' sequence ends (or at the end of the string), we print numbers in reverse order to ensure a decreasing sequence.
------------------
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String pattern = sc.next();
        String result = "";
        int num = 1;
        int dCount = 0;

        for (int i = 0; i <= pattern.length(); i++) {
            dCount++;
            if (i == pattern.length() || pattern.charAt(i) == 'I') {
                for (int j = dCount; j >= 1; j--) {
                    result += (num + j - 1);
                }
                num += dCount;
                dCount = 0;
            }
        }

        System.out.println(result);
        sc.close();
    }
}

num → Represents the smallest number available to use.
j → Counts down from dCount to 1, ensuring that the decreasing sequence is handled correctly.
num + j - 1 → Determines the correct digit to append in the decreasing order.


----------------
using stack
---------------
import java.util.Scanner;
import java.util.Stack;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String pattern = sc.next();
        StringBuilder result = new StringBuilder();
        Stack<Integer> stack = new Stack<>();

        for (int i = 0; i <= pattern.length(); i++) {
            stack.push(i + 1);

            if (i == pattern.length() || pattern.charAt(i) == 'I') {
                while (!stack.isEmpty()) {
                    result.append(stack.pop());
                }
            }
        }

        System.out.println(result.toString());
        sc.close();
    }
}
